name: Deploy to Lambda

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual trigger

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version
          
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-root
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Build Lambda package and layer
        run: |
          poetry run python scripts/build_layer.py
          poetry run python scripts/build_lambda.py
          
      - name: Setup Terraform Backend
        run: |
          chmod +x scripts/init_terraform_backend.sh
          ./scripts/init_terraform_backend.sh
          
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan || exit_code=$?
          if [ $exit_code -eq 1 ]; then
            echo "Some resources already exist, proceeding with state import..."
            terraform import aws_s3_bucket.terraform_state ${var.terraform_state_bucket} || true
            terraform plan -out=tfplan
          fi
          
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
