name: Deploy to Amplify

on:
  push:
    branches: [ main, amplify_deployment ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Amplify CLI
        run: |
          npm install -g @aws-amplify/cli
          amplify --version
        
      - name: Configure Amplify
        run: |
          APP_NAME="fastapi-lambda-app"
          
          # Try to get existing app
          EXISTING_APP=$(aws amplify list-apps --query "apps[?name=='${APP_NAME}'].appId" --output text)
          
          if [ -z "$EXISTING_APP" ]; then
            echo "Creating new Amplify app..."
            APP_ID=$(aws amplify create-app \
              --name "${APP_NAME}" \
              --platform "WEB" \
              --repository "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" \
              --query "app.appId" \
              --output text)
              
            aws amplify create-backend-environment \
              --app-id "${APP_ID}" \
              --environment-name "prod"
          else
            APP_ID="${EXISTING_APP}"
          fi
          
          # Configure Amplify CLI
          echo "amplify configure project" | amplify configure project \
            --amplify "{\"appId\":\"${APP_ID}\",\"envName\":\"prod\"}" \
            --yes

      - name: Build and Package
        run: |
          # Install dependencies
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-dev
          
          # Create deployment package
          mkdir -p amplify/backend/function/fastapi/src
          cp -r src/* amplify/backend/function/fastapi/src/
          cp pyproject.toml poetry.lock amplify/backend/function/fastapi/

      - name: Deploy with Amplify
        run: |
          # Push Amplify changes
          amplify push \
            --yes \
            --allow-destructive-updates
        env:
          CI: true
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }} 