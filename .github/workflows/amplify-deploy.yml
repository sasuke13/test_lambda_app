name: Deploy to Amplify

on:
  push:
    branches: [ main, amplify_deployment ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "fastapi-lambda-app"
    
    steps:
      - uses: actions/checkout@v3
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Amplify CLI
        run: |
          npm install -g @aws-amplify/cli
          amplify --version
        
      - name: Configure Amplify
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          # Create necessary directories
          mkdir -p amplify/.config
          mkdir -p amplify/backend/api/fastapi
          mkdir -p amplify/backend/awscloudformation
          
          # Create AWS credentials file
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = ${AWS_ACCESS_KEY_ID}
          aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
          region = ${AWS_REGION}
          EOF
          
          cat > ~/.aws/config << EOF
          [default]
          region = ${AWS_REGION}
          output = json
          EOF
          
          # Try to get app ID by name
          APP_ID=$(aws amplify list-apps --query "apps[?name=='${APP_NAME}'].appId" --output text)
          
          if [ -z "$APP_ID" ]; then
            echo "Creating new Amplify app..."
            APP_ID=$(aws amplify create-app --name "${APP_NAME}" --platform "WEB" --query 'app.appId' --output text)
          else
            echo "Found existing Amplify app with ID: ${APP_ID}"
          fi
          
          # Export APP_ID for subsequent steps
          echo "APP_ID=${APP_ID}" >> $GITHUB_ENV
          
          # Create deployment bucket if it doesn't exist
          DEPLOYMENT_BUCKET="amplify-${APP_NAME}-${APP_ID}-deployment"
          if ! aws s3api head-bucket --bucket "$DEPLOYMENT_BUCKET" 2>/dev/null; then
            if [ "$AWS_REGION" = "us-east-1" ]; then
              aws s3api create-bucket \
                --bucket "$DEPLOYMENT_BUCKET" \
                --region "$AWS_REGION"
            else
              aws s3api create-bucket \
                --bucket "$DEPLOYMENT_BUCKET" \
                --region "$AWS_REGION" \
                --create-bucket-configuration LocationConstraint="$AWS_REGION"
            fi
          fi
          
          # Export deployment bucket name
          echo "DEPLOYMENT_BUCKET=${DEPLOYMENT_BUCKET}" >> $GITHUB_ENV
          
          # Create AWS configuration file
          cat > amplify/backend/awscloudformation/config.json << EOF
          {
            "configLevel": "project",
            "useProfile": false,
            "profileName": "default",
            "accessKeyId": "$AWS_ACCESS_KEY_ID",
            "secretAccessKey": "$AWS_SECRET_ACCESS_KEY",
            "region": "$AWS_REGION"
          }
          EOF
          
          # Create team provider info
          cat > amplify/team-provider-info.json << EOF
          {
            "prod": {
              "awscloudformation": {
                "Region": "$AWS_REGION",
                "DeploymentBucketName": "$DEPLOYMENT_BUCKET",
                "UnauthRoleName": "amplify-${APP_NAME}-prod-unauthRole",
                "StackName": "amplify-${APP_NAME}-prod",
                "StackId": "aws:cloudformation:${AWS_REGION}:${AWS_ACCOUNT_ID}:stack/amplify-${APP_NAME}-prod/",
                "AuthRoleName": "amplify-${APP_NAME}-prod-authRole",
                "UnauthRoleArn": "arn:aws:iam::${AWS_ACCOUNT_ID}:role/amplify-${APP_NAME}-prod-unauthRole",
                "AuthRoleArn": "arn:aws:iam::${AWS_ACCOUNT_ID}:role/amplify-${APP_NAME}-prod-authRole"
              }
            }
          }
          EOF
          
          # Create project config file
          cat > amplify/.config/project-config.json << EOF
          {
            "projectName": "${APP_NAME}",
            "version": "3.1",
            "frontend": "javascript",
            "javascript": {
              "framework": "none",
              "config": {
                "SourceDir": "src",
                "DistributionDir": "dist",
                "BuildCommand": "npm run-script build",
                "StartCommand": "npm run-script start"
              }
            },
            "providers": ["awscloudformation"]
          }
          EOF
          
          # Create local-env-info.json
          cat > amplify/.config/local-env-info.json << EOF
          {
            "projectPath": "$(pwd)",
            "defaultEditor": "vscode",
            "envName": "prod"
          }
          EOF
          
          # Create local-aws-info.json
          cat > amplify/.config/local-aws-info.json << EOF
          {
            "prod": {
              "configLevel": "project",
              "useProfile": false,
              "awsConfigFilePath": "~/.aws/config"
            }
          }
          EOF
          
          # Create backend config
          mkdir -p amplify/backend/api/fastapi
          cat > amplify/backend/api/fastapi/parameters.json << EOF
          {
            "deploymentBucketName": "${DEPLOYMENT_BUCKET}",
            "env": "prod"
          }
          EOF
          
          # Create backend-config.json
          cat > amplify/backend/backend-config.json << EOF
          {
            "api": {
              "fastapi": {
                "service": "Lambda",
                "providerPlugin": "awscloudformation",
                "dependsOn": [],
                "build": true
              }
            }
          }
          EOF

          # Create amplify.json
          cat > amplify/amplify.json << EOF
          {
            "features": {
              "graphqltransformer": {
                "transformerversion": 2
              },
              "keytransformer": {
                "defaultquery": true
              }
            }
          }
          EOF

          # Create CLI config
          cat > ~/.amplify/cli.json << EOF
          {
            "features": {
              "auth": {
                "enableCaseInsensitivity": true,
                "useEnabledMfas": true
              }
            }
          }
          EOF

          # Initialize Amplify project with minimal configuration
          amplify init \
            --appId ${APP_ID} \
            --envName prod \
            --yes \
            --amplify "{\"envName\":\"prod\"}" \
            --providers "{\"awscloudformation\":{\"configLevel\":\"project\",\"useProfile\":false,\"accessKeyId\":\"${AWS_ACCESS_KEY_ID}\",\"secretAccessKey\":\"${AWS_SECRET_ACCESS_KEY}\",\"region\":\"${AWS_REGION}\"}}"

          # Add API after initialization
          amplify add api \
            --service Lambda \
            --name fastapi \
            --runtime python3.11 \
            --template "REST" \
            --paths "/api" \
            --resourceName fastapi \
            --yes

      - name: Build and Package
        run: |
          # Install dependencies
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --without dev
          
          # Create deployment package
          mkdir -p amplify/backend/api/fastapi/src
          cp -r src/* amplify/backend/api/fastapi/src/
          cp pyproject.toml poetry.lock amplify/backend/api/fastapi/
          
          # Create and upload function zip
          cd amplify/backend/api/fastapi
          zip -r function.zip ./*
          aws s3 cp function.zip s3://${DEPLOYMENT_BUCKET}/amplify-builds/fastapi-prod-latest.zip
          cd ../../../../

      - name: Deploy with Amplify
        run: |
          amplify push \
            --yes \
            --allow-destructive-updates
        env:
          CI: true
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          
      - name: Get API URL
        run: |
          # Get and display the API endpoint URL
          API_ID=$(aws amplify get-backend-environment \
            --app-id ${APP_ID} \
            --environment-name prod \
            --query 'backendEnvironment.apiId' \
            --output text)
          
          API_URL="https://${API_ID}.execute-api.${AWS_REGION}.amazonaws.com/prod"
          echo "API_URL=${API_URL}" >> $GITHUB_ENV
          echo "API is available at: ${API_URL}" 