name: Deploy to Amplify

on:
  push:
    branches: [ main, amplify_deployment ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read
  checks: read
  deployments: write
  issues: read
  discussions: read
  packages: read
  pages: read
  pull-requests: read
  repository-projects: read
  security-events: read
  statuses: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Install Amplify CLI
        run: npm install -g @aws-amplify/cli
        
      - name: Create or Get Amplify App
        id: create_app
        run: |
          APP_NAME="fastapi-lambda-app"
          
          # Try to get existing app
          EXISTING_APP=$(aws amplify list-apps --query "apps[?name=='${APP_NAME}'].appId" --output text)
          
          if [ -z "$EXISTING_APP" ]; then
            echo "Creating new Amplify app..."
            # Create new app with OAuth token
            APP_ID=$(aws amplify create-app \
              --name "${APP_NAME}" \
              --platform "WEB" \
              --oauth-token ${{ secrets.GH_PAT }} \
              --repository "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" \
              --query "app.appId" \
              --output text)
              
            # Create backend environment
            aws amplify create-backend-environment \
              --app-id "${APP_ID}" \
              --environment-name "prod"
              
            echo "Created new app with ID: ${APP_ID}"
          else
            APP_ID="${EXISTING_APP}"
            echo "Using existing app with ID: ${APP_ID}"
          fi
          
          echo "app_id=${APP_ID}" >> $GITHUB_OUTPUT
        
      - name: Initialize Amplify
        run: |
          APP_ID="${{ steps.create_app.outputs.app_id }}"
          
          # Create Amplify configuration files
          mkdir -p amplify/backend/api/fastapi
          
          # Create backend config
          echo '{
            "api": {
              "fastapi": {
                "service": "Lambda",
                "providerPlugin": "awscloudformation",
                "dependsOn": [],
                "build": true
              }
            }
          }' > amplify/backend/backend-config.json
          
          # Create API config with corrected S3Key syntax
          echo '{
            "AWSTemplateFormatVersion": "2010-09-09",
            "Description": "FastAPI Lambda function configuration",
            "Parameters": {
              "env": {
                "Type": "String"
              },
              "deploymentBucket": {
                "Type": "String",
                "Description": "S3 bucket for Lambda deployment"
              }
            },
            "Resources": {
              "LambdaFunction": {
                "Type": "AWS::Lambda::Function",
                "Properties": {
                  "Code": {
                    "S3Bucket": {"Ref": "deploymentBucket"},
                    "S3Key": {"Fn::Sub": "amplify-builds/fastapi-${env}-latest.zip"}
                  },
                  "Handler": "src.main.handler",
                  "Runtime": "python3.11",
                  "Timeout": 30,
                  "MemorySize": 256,
                  "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},
                  "Environment": {
                    "Variables": {
                      "ENV": {"Ref": "env"}
                    }
                  }
                }
              }
            }
          }' > amplify/backend/api/fastapi/fastapi-cloudformation-template.json
          
      - name: Create deployment bucket
        run: |
          APP_ID="${{ steps.create_app.outputs.app_id }}"
          BUCKET_NAME="lambda-deploy-${APP_ID}"
          
          # Create bucket
          aws s3api create-bucket \
            --bucket ${BUCKET_NAME} \
            --region ${{ secrets.AWS_REGION }} \
            || true
          
          # Create the deployment package
          zip -r function.zip src/ pyproject.toml poetry.lock
          
          # Upload to S3
          aws s3 cp function.zip s3://${BUCKET_NAME}/amplify-builds/fastapi-prod-latest.zip

      - name: Deploy to Amplify
        timeout-minutes: 10
        run: |
          APP_ID="${{ steps.create_app.outputs.app_id }}"
          BUCKET_NAME="lambda-deploy-${APP_ID}"
          
          # Update CloudFormation template
          sed -i "s/deploymentBucket/${BUCKET_NAME}/g" amplify/backend/api/fastapi/fastapi-cloudformation-template.json
          
          # Deploy CloudFormation stack
          aws cloudformation deploy \
            --template-file amplify/backend/api/fastapi/fastapi-cloudformation-template.json \
            --stack-name lambda-stack-${APP_ID} \
            --parameter-overrides \
              env=prod \
              deploymentBucket=${BUCKET_NAME} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
          
          # Get the API URL from stack outputs
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name lambda-stack-${APP_ID} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          
          echo "Deployed API URL: ${API_URL}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CI: true 